{"version":3,"sources":["components/Login.js","components/Register.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","setAuth","useState","email","password","inputs","setInputs","onChange","e","target","name","value","onSubmitForm","a","preventDefault","body","console","log","axios","post","response","data","message","style","marginTop","onSubmit","type","placeholder","className","Register","setIntputs","username","confirmation","responseData","success","alert","margin","textAlign","Dashboard","onClick","App","isAuthenticated","setIsAuthenticated","boolean","exact","path","render","props","to","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4f75cfa7.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react'\nimport axios from 'axios'\n\nconst Login = ({setAuth}) => {\n    const [inputs, setInputs] = useState({\n        email: \"\",\n        password: \"\",\n    })\n\n    //destruct\nconst {email, password} = inputs;\n\nconst onChange = (e) => {\n    // console.log(e.target.value)\n    setInputs({...inputs, [e.target.name] : e.target.value})\n}\n\nconst onSubmitForm = async (e) => {\n    e.preventDefault()\n    const body = {email, password}\n    console.log(body.email)\n    try {\n        const response = await axios.post('/api/login', body)\n        console.log(response.data)\n\n    } catch (err) {\n        console.log(err.message)\n    }\n}\n    return (\n        <Fragment>\n            <h1 style={{marginTop: \"50px\"}}>Login</h1>\n            <form onSubmit={onSubmitForm}>\n                <input type=\"email\"\n                    name=\"email\"\n                    placeholder=\"email\"\n                    className=\"form-control my-3\"\n                    value={email}\n                    onChange={e => onChange(e)}\n                />\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"password\"\n                    className=\"form-control my-3\"\n                    value={password}\n                    onChange={e => onChange(e)}\n                />\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Login</button>\n            </form>\n            {/* <button onClick={() => {setAuth(true)}}>Go to DashBoard</button> */}\n        </Fragment>\n    )\n}\n\nexport default Login;\n","import React, {Fragment, useState} from 'react';\nimport axios from 'axios'\nconst Register = ({setAuth}) => {\n\n    const [inputs, setIntputs] = useState({\n        email: \"\",\n        password: \"\",\n        name: \"\"\n    });\n    \n    const {email, password, username} = inputs;\n\n    const onChange = (e) => {\n        setIntputs({...inputs, [e.target.name] : e.target.value})\n    }\n\n    const onSubmitForm = async(e) => {\n        //tes\n        // let testObject = {username: \"hae23333222\", email: \"email@emaild2dd3222223w363.com\", password: \"daosdk33d\", confirmation: \"hl3\"}\n        const body = {email, password, username, confirmation: \"hl3\"}\n        console.log(body)\n        e.preventDefault()\n        try{\n            const response = await axios.post(`/api/register`, body)\n            const responseData = response.data\n            // console.log(typeof(response.data.success));\n            // console.log(response.data)\n            if(responseData.success) {\n                setAuth(true);\n            }\n            else {\n                alert(responseData.message);\n            }\n            // success\n            console.log(responseData)\n        } catch (err) {\n            console.log(err.message)\n        }\n    }\n\n\n\n    return ( \n        <Fragment>\n             <h1 style={{margin: \"100px\", textAlign: \"center\"}}> Register</h1>\n            <form onSubmit={onSubmitForm}>\n                <input \n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"email\"\n                    className=\"form-control my-3\"\n                    value={email}\n                    onChange={e => onChange(e)}\n                />\n                <input \n                    type=\"password\" \n                    name=\"password\" \n                    placeholder=\"password\"\n                    className=\"form-control my-3\"\n                    onChange={e => onChange(e)}\n                    value={password}\n                />\n                <input\n                    name=\"username\"\n                    placeholder=\"username\"\n                    className=\"form-control my-3\"\n                    onChange={e => onChange(e)}\n                    value={username}\n                />\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">submit</button>\n            </form>\n        </Fragment>\n    )\n}\n\nexport default Register\n","import React, {Fragment, useState} from 'react'\n\nconst Dashboard = ({setAuth}) => {\n    return (\n        <div>\n            <Fragment>\n                <h1>Login</h1>\n                <button onClick={() => {setAuth(false)}}>Go to Login</button>\n            </Fragment>\n        </div>\n    )\n}\n\nexport default Dashboard\n","import React, {Fragment,useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\n//components\n\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Dashboard from \"./components/Dashboard\";\nimport RegisterForm from './pages/register';\n\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const setAuth = (boolean) => {\n    setIsAuthenticated(boolean)\n  }\n\n  return (\n    <Fragment>\n      <Router>\n        <div className=\"container\">\n          <Switch>\n            <Route \n              exact \n              path=\"/login\" \n              render={props  => \n                !isAuthenticated ? (\n                <Login {...props} setAuth={setAuth}/>\n                ) : (\n                <Redirect to=\"/dashboard\"/>)\n                }\n            />\n            <Route \n              exact\n              path=\"/register\"\n              render={props =>\n                !isAuthenticated ? (\n                  <Register {...props} setAuth={setAuth}/>\n                ) : (\n                  <Redirect to=\"/dashboard\"/>\n                )\n              }\n            />\n            <Route \n              exact\n              path=\"/dashboard\"\n              render={props =>\n                isAuthenticated ? (\n                  <Dashboard {...props} setAuth={setAuth} />\n                ) : (\n                  <Redirect to=\"/login\" />\n                )\n              }\n            />\n          </Switch>\n        </div>\n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n\n\n// const [time, timeSet] = useState(0);\n  // const [email, setEmail] = React.useState(\"thisEmail\");\n  // const [password, setPassword] = React.useState(\"e2\");\n\n  // useEffect(() => {\n  //   fetch('/api/time').then(res => res.json()).then(data => {\n  //     timeSet(data.time);\n  //   })\n  // }, [])\n\n  // const handleEmailChange = (inputValue) => {\n  //   setEmail(inputValue);\n    \n  // }\n\n\n  // const handlPasswordChange = (inputValue) => {\n  //   setPassword(inputValue);\n  // }\n\n  // const handleFormatSubmit = async () => {\n  //   let obj = {hello: \"Money\"}\n  //   fetch( '/api/register', {\n  //   headers: {\n  //     'Accept': 'application/json',\n  //     'Content-Type': 'application/json'\n  //   }, \n  //   method: 'POST',\n  //   body: {\n  //     'user1':'1234'\n  //   }\n  // });\n    // axios.post('http://127.0.0.1:5000/api/register', obj)\n    //         .then(function(response){\n    //             console.log(response);\n    //    //Perform action based on response\n    //     })\n    //     .catch(function(error){\n    //         console.log(error);\n    //    //Perform action based on error\n    //     });\n    // var json = JSON.stringify(obj);\n    // try {\n    //   const tru = await axios.post(`/api/register`, json)\n    //   console.log(tru.data)\n    // } catch (err) {\n    //   // Handle error\n    // }\n  // }\n\n  // const send = async () => {\n    \n  //   try {\n  //     const tru = await axios.post(`/api/register`, {hello: \"h\"})\n  //     console.log(tru.data)\n  //   } catch (err) {\n  //     // Handle error\n  //   }\n  // }\n    \n    // return (\n    // <div className=\"App\">\n    //     <RegisterForm userEmail={email} userPassword={password} onFormChange={handleEmailChange} onFormSubmit={handleFormatSubmit} />\n    //     <p>The time is {time}</p>\n    //     <button onClick={send}>thisBut</button>\n        \n    // </div>\n//   );\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}